name: Release

on:
  push:
    branches: [ main ]
    paths: [ 'Cargo.toml' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: version_check
      run: |
        # Get the current version from Cargo.toml
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        
        # Get the previous version from the last commit
        git checkout HEAD~1 -- Cargo.toml 2>/dev/null || echo "No previous Cargo.toml"
        if [ -f Cargo.toml ]; then
          PREVIOUS_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/' || echo "")
        else
          PREVIOUS_VERSION=""
        fi
        
        # Restore current Cargo.toml
        git checkout HEAD -- Cargo.toml
        
        echo "Current version: $CURRENT_VERSION"
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Check if version changed
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$CURRENT_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Version changed from '$PREVIOUS_VERSION' to '$CURRENT_VERSION'"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version did not change"
        fi

  build:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
            arch: arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install BPF dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang \
          llvm \
          libbpf-dev \
          linux-headers-$(uname -r) \
          build-essential \
          libelf-dev \
          zlib1g-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create binary archive
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf jtracing-${{ needs.check-version.outputs.new_version }}-${{ matrix.arch }}-linux.tar.gz \
          bash_readline \
          eglswapbuffers \
          execsnoop_pb \
          execsnoop_rb \
          funccount \
          malloc_free \
          profile \
          opensnoop \
          packet_count
    
    - name: Upload binary archive
      uses: actions/upload-artifact@v4
      with:
        name: jtracing-${{ needs.check-version.outputs.new_version }}-${{ matrix.arch }}-linux
        path: target/${{ matrix.target }}/release/jtracing-${{ needs.check-version.outputs.new_version }}-${{ matrix.arch }}-linux.tar.gz

  package-deb:
    needs: [check-version, build]
    if: needs.check-version.outputs.version_changed == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
            artifact_arch: x86_64
          - target: aarch64-unknown-linux-gnu  
            arch: arm64
            artifact_arch: arm64
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Download binary archive
      uses: actions/download-artifact@v4
      with:
        name: jtracing-${{ needs.check-version.outputs.new_version }}-${{ matrix.artifact_arch }}-linux
    
    - name: Extract binaries
      run: |
        ls -la
        tar -xzf jtracing-${{ needs.check-version.outputs.new_version }}-${{ matrix.artifact_arch }}-linux.tar.gz
    
    - name: Create Debian package structure
      run: |
        VERSION=${{ needs.check-version.outputs.new_version }}
        ARCH=${{ matrix.arch }}
        PKG_DIR="jtracing_${VERSION}_${ARCH}"
        
        # Create package directory structure
        mkdir -p ${PKG_DIR}/DEBIAN
        mkdir -p ${PKG_DIR}/usr/bin
        mkdir -p ${PKG_DIR}/usr/share/doc/jtracing
        
        # Copy binaries
        cp bash_readline eglswapbuffers execsnoop_pb execsnoop_rb funccount malloc_free profile opensnoop packet_count ${PKG_DIR}/usr/bin/
        
        # Create control file
        cat > ${PKG_DIR}/DEBIAN/control << EOF
        Package: jtracing
        Version: ${VERSION}
        Section: utils
        Priority: optional
        Architecture: ${ARCH}
        Maintainer: Seimizu Joukan <joukan.seimizu@gmail.com>
        Description: BPF-based tracing tools collection
         A collection of BPF-based tracing tools for system monitoring and debugging.
         Includes tools for tracing malloc/free, function calls, process execution,
         and other system events.
        EOF
        
        # Create copyright file
        cat > ${PKG_DIR}/usr/share/doc/jtracing/copyright << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: jtracing
        Source: https://github.com/saimizi/jtracing
        
        Files: *
        Copyright: 2022-2025 jtracing contributors
        License: GPL-2.0
        EOF
        
        # Create changelog
        cat > ${PKG_DIR}/usr/share/doc/jtracing/changelog.Debian << EOF
        jtracing (${VERSION}) unstable; urgency=medium
        
          * Automated release build
        
         -- GitHub Actions <noreply@github.com>  $(date -R)
        EOF
        
        # Compress changelog
        gzip -9 ${PKG_DIR}/usr/share/doc/jtracing/changelog.Debian
        
        # Set permissions
        chmod 755 ${PKG_DIR}/usr/bin/*
        chmod 644 ${PKG_DIR}/usr/share/doc/jtracing/*
        
        # Build package
        dpkg-deb --build ${PKG_DIR}
    
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: jtracing-${{ needs.check-version.outputs.new_version }}-${{ matrix.arch }}-deb
        path: jtracing_${{ needs.check-version.outputs.new_version }}_${{ matrix.arch }}.deb

  create-release:
    needs: [check-version, build, package-deb]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ needs.check-version.outputs.new_version }}
        
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | head -n1 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > changelog.md
          echo "" >> changelog.md
          git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> changelog.md
        else
          echo "## Initial Release" > changelog.md
          echo "" >> changelog.md
          echo "First release of jtracing tools collection." >> changelog.md
        fi
        
        # Read changelog content for output
        CHANGELOG_CONTENT=$(cat changelog.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create source tarball
      run: |
        VERSION=${{ needs.check-version.outputs.new_version }}
        git archive --format=tar.gz --prefix=jtracing-${VERSION}/ HEAD > jtracing-${VERSION}-src.tar.gz
    
    - name: Prepare release assets
      run: |
        VERSION=${{ needs.check-version.outputs.new_version }}
        mkdir -p release-assets
        
        # Copy source tarball
        cp jtracing-${VERSION}-src.tar.gz release-assets/
        
        # Copy binary archives
        cp jtracing-${VERSION}-x86_64-linux/*.tar.gz release-assets/ 2>/dev/null || true
        cp jtracing-${VERSION}-arm64-linux/*.tar.gz release-assets/ 2>/dev/null || true
        
        # Copy Debian packages
        cp jtracing-${VERSION}-amd64-deb/*.deb release-assets/ 2>/dev/null || true
        cp jtracing-${VERSION}-arm64-deb/*.deb release-assets/ 2>/dev/null || true
        
        ls -la release-assets/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.new_version }}
        name: Release-${{ needs.check-version.outputs.new_version }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
